// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

// Reminder message
model Task {
  id            Int @id @default(autoincrement())
  content       String
  userId        String // Clerk id
  done          Boolean @default(false)
  expiresAt     DateTime @default(dbgenerated("NOW() + interval '1 hour'")) // Default reminder is 1 hour from now
  createdAt     DateTime @default(now())
  schedule      String @default("in 1 hour")
  repeat        Boolean @default(false)
}

// User info & settings
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  firstName     String?
  lastName      String?
  timezone      String? // Important since all reminders in DB are stored in UTC
  phoneNumber   String?
  createdAt     DateTime @default(now()) // Keep track of when the user account was created
  access        Access @default(WAITLIST)
}

enum Access {
  WAITLIST 
  LA
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}